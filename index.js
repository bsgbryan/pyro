// Generated by CoffeeScript 1.7.1
(function() {
  var Firebase, add, do_increment_count, firebase, increment_count, q, sanitize, set,
    __slice = [].slice;

  Firebase = require('firebase');

  firebase = new Firebase(process.env.FIREBASE_ROOT);

  q = require('q');

  firebase.auth(process.env.FIREBASE_KEY, function() {
    return console.log('AUTHED');
  });

  Array.prototype.last = function() {
    return this[this.length - 1];
  };

  sanitize = function(nodes) {
    return nodes.join('/').replace(/\.|#|\$|\[|\]/g, '');
  };

  set = function() {
    var deferred, nodes, value;
    value = arguments[0], nodes = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    deferred = q.defer();
    firebase.child(sanitize(nodes)).setWithPriority(value, Date.now(), function(err) {
      if (err != null) {
        return deferred.reject({
          context: 'readbase.set',
          error: err
        });
      } else {
        return deferred.resolve(true);
      }
    });
    return deferred.promise;
  };

  add = function() {
    var deferred, increment_recursively, nodes, path, steps, value;
    value = arguments[0], increment_recursively = arguments[1], nodes = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
    deferred = q.defer();
    steps = nodes.reverse();
    path = sanitize(steps);
    firebase.child(path).once('value', function(snapshot) {
      var val;
      val = snapshot.val();
      if (val != null) {
        return deferred.resolve({
          added: null
        });
      } else {
        return set(value, steps).then(function() {
          if (increment_recursively) {
            return do_increment_count(steps.slice(0, -1));
          } else {
            return increment_count(sanitize(steps.slice(0, -1)));
          }
        }).then(function() {
          return deferred.resolve({
            added: nodes.last
          });
        }).fail(function(err) {
          console.log("error " + err);
          return deferred.reject({
            context: 'readbase.add',
            error: err
          });
        });
      }
    });
    return deferred.promise;
  };

  do_increment_count = function(nodes) {
    var deferred;
    deferred = q.defer();
    if (nodes.length > 0) {
      increment_count(sanitize(nodes)).then(function() {
        return do_increment_count(nodes.slice(0, -1));
      }).then(function() {
        return deferred.resolve();
      }).fail(function(err) {
        return deferred.reject({
          context: 'do_increment_count',
          error: err
        });
      });
    } else {
      setTimeout(function() {
        return deferred.resolve();
      }, 0);
    }
    return deferred.promise;
  };

  increment_count = function(path) {
    var count, deferred;
    deferred = q.defer();
    count = path + '/count';
    firebase.child(count).once('value', function(snapshot) {
      var val;
      val = snapshot.val() || 0;
      return firebase.child(count).setWithPriority(++val, Date.now(), function(err) {
        if (err != null) {
          return deferred.reject({
            context: 'increment_count',
            error: err
          });
        } else {
          return deferred.resolve();
        }
      });
    });
    return deferred.promise;
  };

  module.exports = {
    set: set,
    add: add
  };

}).call(this);
